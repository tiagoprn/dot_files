# General

    ## VIM MOVEMENT KEYS:

        h: back
        j: down
        k: up
        l: forward

        NOTE: Prefix the movement keys with a number and you will move to that direction x times. E.g. 10k moves 10 lines up

    ## KEY MAPPINGS
    ### View all key mappings in vim
        (VISUAL) :map

    ## BUFFERS:
        Close all current buffers: (VISUAL) :bufdo bdelete
          (bufdo do whatever is typed after it on all current buffers, so it can be useful on other contexts as well.)

    ## UNDO / REDO:
        Undo: (VISUAL) u
        Redo: (VISUAL) <CTRL+r>

    ## REPEAT THE LAST COMMAND
        (VISUAL) .

    ## SHOW / HIDE SPECIAL CHARS:
        :set list (to show all)
        :set nolist (to hide all)

    ## ZOOM / UNZOOM THE CURRENT BUFFER:
    (VISUAL) <CTRL+z>

    ## RELOAD CURRENT FILE (E.g., it was changes outside vim):
    (VISUAL) e!

    ## VERTICAL SELECTION (BLOCK):
	<CTRL+v>

    ## SELECT A WHOLE LINE:
    (VISUAL) V
    OBS.: keep selecting with the arrow keys you can select multiple lines as a whole

    ## SELECT WHAT IS IN QUOTES ON THE CURRENT LINE
    (works with "[}(" also)

        (VISUAL) norm 0yi"  # go to beginning of line (0), (y)ank what is (i)n double quotes

    ## SELECT ALL TEXT:

    (VISUAL) <,all>

    ## BATCH DELETE OF LINES:
        From an interval of lines: (VISUAL) :5,50d
	    From the current line on, delete the next 100k lines: (VISUAL) :.,+100000d

    ## BATCH COPY OF LINES:
        From an interval of lines: (VISUAL) :5,50y
	    From the current line on, copy the next 100k lines: (VISUAL) :.,+100000y

    ## REPLACE SELECTED TEXT WITH CLIPBOARD CONTENTS:
        (VISUAL) r

    ## REPLACE SELECTED TEXT WITH NEW CONTENTS:
        (VISUAL) Select the text, then c.

    ## DELETE UNTIL END OF LINE:
	    (VISUAL) d$

    ## DELETE UNTIL BEGINNING OF LINE:
        (VISUAL) d^

    ## NAVIGATION (VISUAL MODE)
        Go to next word: <w>
        Go to the end of a word: <e>
        Go to previous word: <b>
        Jump to a matching opening or closing parenthesis, square bracket or a curly brace: <%>

        ### MOVE TO THE START OF THE LINE:
            (VISUAL) 0

        ### MOVE TO THE END OF THE LINE:
            (VISUAL) $

        ### MOVE TO THE START OF THE LINE AND ENTER INSERT MODE:
            (VISUAL) I

        ### MOVE TO THE END OF THE LINE AND ENTER INSERT MODE:
            (VISUAL) A

        ### MOVE TO THE BEGINNING OF THE FILE:
            (VISUAL) gg

        ### MOVE TO THE END OF THE FILE:
            (VISUAL) G

        ### MOVE TO THE END OF THE FILE AND ENTER INSERT MODE:
            (VISUAL) GA

    ## SEARCH / REPLACE
        - Search for current word on the cursor (visual mode):
            Forwards: (VISUAL) *
            Backwards: (VISUAL) #
        - Search / Replace
            (VISUAL) :%s/search/replace/g[ic]
                %s = on the whole file
                g = all ocurrences in the line
                i = case insensitive
                c = confirm each match

    ## HISTORY:
        List of past commands (hitting <Enter> you can execute them):
            (VISUAL) q:

    ## COPY
        To copy text from other apps (browser, text editor), disabling the auto-indent:
            (INSERT) mode, press <F2>. Then paste the desired text and press <F2> again.

    ## CLIPBOARD:
        Copy vim clipboard to system:
            (VISUAL) Select text (with <v>), then <C-y>

        Paste system clipboard to vim:
            (VISUAL) <C-p>

    ## READ THE OUTPUT FROM A COMMAND ON THE CURRENT BUFFER:
        (VISUAL) read ![command]

    ## RUN A NORMAL MODE COMMAND ON MULTIPLE LINES:
        (VISUAL) norm Iline  # goes to the beginning of a line and enter INSERT mode, type line
        (VISUAL) norm Aend   # goes to the end of a line and enter INSERT mode, type end
        NOTES:
            - This can be done with many lines selected (with V), then :norm A... to edit multiple lines.
            - You can run any normal mode command you wish, but if you use I and A you will enter INSERT mode.

    ## Record a macro:
    (TODO, this is not complete yet)

    If you wanna script moving the cursor, use vim movement keys (hjkl):

    (VISUAL) q[another key to where the macro will be saved as] put the cursor where to start and do your key presses here (VISUAL)q to finish, replay the macro with @

    ## Script vim commands
    $ vim --cmd 'echo "This runs before .vimrc"' -c ':call UltiSnips#ListSnippets()' -c '<Esc>' -c ':q!'
    $ vim -c ':call UltiSnips#ListSnippets()' -c ':q!'

# vim-bookmarks:
    (all commands below run in VISUAL mode):
    Set  Bookmark: <,,>
    Unset  Bookmark: <,c>
    Show all Bookmarks: <,a>
    Next Bookmark: <,n>
    Previous Bookmark: <,p>
    Clear All Bookmarks: <,x>

# TaskList:
    Toggle TODO/FIXME list: <CTRL+t>

# vim-fzf:
    Search file by name: <CTRL+f>
    Search file by contents: <CTRL+g>

# vim-ctrlspace:

    ## BUFFERS:
        Show buffers list: <CTRL+Space>, then <a>
        Close buffer: Select the buffer, then: <c>
        Delete buffer (almost the same as closing it): Select the buffer, then: <d>
        Toggle buffers: (VISUAL) ,<w> ("," is the Leader key)
        Open selected buffer in a vertical (side-by-side) split: v
        Open selected buffer in a horizontal (below) split: s
        Close selected buffer split opened: x

    ## WORKSPACES:
        Show all workspaces: <CTRL+Space> "w"
        Save/Update current open buffers on workspace: <CTRL+Space> "w", "s"
        Delete workpace: [Show all workpaces], navigate, then "d"
        Rename current workspace: [Show all workpaces], navigate, then "="
        Create a new workpace: <CTRL+Space> "w", "n"

# NERDTree:
## (https://github.com/scrooloose/nerdtree/blob/master/doc/NERD_tree.txt)
    Open: <CTRL+n>
    Refresh: put the cursor on the folder, then: <r> or <R>
    Bookmark a file/folder: put the cursor on the file/folder, then:
        (VISUAL) :Bookmark [<name>]
    By default, bookmarks are at: $HOME/.NERDTreeBookmarks
    To create / delete / copy / move files or folders: put the cursor on the desired file/directory to operate on, then: <m>
