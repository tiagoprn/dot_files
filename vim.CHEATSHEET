# General

    ## KEY MAPPINGS
    ### View all key mappings in vim
        (VISUAL) :map

    ## BUFFERS:
        Close all current buffers: (VISUAL) :bufdo bdelete
          (bufdo do whatever is typed after it on all current buffers, so it can be useful on other contexts as well.)

    ## UNDO / REDO:
        Undo: (VISUAL) u
        Redo: (VISUAL) <CTRL+r>

    ## SHOW / HIDE SPECIAL CHARS:
        :set list (to show all)
        :set nolist (to hide all)
    
    ## ZOOM / UNZOOM THE CURRENT BUFFER: 
    (VISUAL) <CTRL+z>

    ## RELOAD CURRENT FILE (E.g., it was changes outside vim): 
    (VISUAL) e!

    ## VERTICAL SELECTION (BLOCK):
	<CTRL+v>

    ## BATCH DELETE OF LINES:
	From the current line on, delete the next 100k lines: (VISUAL) :.,+100000d

    ## DELETE UNTIL END OF LINE: 
	(VISUAL) d$

    ## DELETE UNTIL BEGINNING OF LINE: 
        (VISUAL) d^

    ## QUICKFIX WINDOW
    ### It is useful, for example, for the Fugitive git plugin "Ggrep" and for
    ### Flake 8.
        Open: (VISUAL) :copen
        Close: (VISUAL) :cclose
        Go to next occurence/error [*]:  (VISUAL) :cn
        Go to previous occurence/error [*]: (VISUAL) :cp
            [*] On both of them, if you specify a number after the command, it will Go to next/previous X occurences you passed to it.
        Clean: (VISUAL) :call setqflist([])

    ## NAVIGATION (VISUAL MODE)
        Go to next word: <w>
        Go to previous word: <b>
        Jump to a matching opening or closing parenthesis, square bracket or a curly brace: <%>

    ## SEARCH / REPLACE
        - Search for current word on the cursor (visual mode):
            Forwards: (VISUAL) *
            Backwards: (VISUAL) #
        - Search / Replace
            (VISUAL) :%s/search/replace/g[ic]
                %s = on the whole file
                g = all ocurrences in the line
                i = case insensitive
                c = confirm each match

    ## HISTORY:
        List of past commands (hitting <Enter> you can execute them):
            (VISUAL) q:
            To exit the list without executing any command: <CTRL+C>

    ## COPY
        To copy text from other apps (browser, text editor, disabling the auto-indent:
            (INSERT) mode, press <F2>. Then paste the desired text and press <F2> again.

    ## CLIPBOARD: 
        Copy vim clipboard to system: 
            (VISUAL) Select text (with <v>), then <C-c>

        Paste system clipboard to vim:
            (INSERT) <C-r>+ 




# vim-bookmarks:
    (all commands below run in VISUAL mode):
    Set  Bookmark: <,,>
    Unset  Bookmark: <,c>
    Show all Bookmarks: <,a>
    Next Bookmark: <,n>
    Previous Bookmark: <,p>
    Clear All Bookmarks: <,x>

# TaskList:
    Toggle TODO/FIXME list: <CTRL+t>

# vim-ctrlspace:

    ## BUFFERS:
        Show buffers list: <CTRL+Space> (navigate with <j>,<k>)
        Close buffer: Select the buffer, then: <c>
        Delete buffer (almost the same as closing it): Select the buffer, then: <d>
        Toggle buffers: (VISUAL) ,<w> ("," is the Leader key)
        Open selected buffer in a vertical (side-by-side) split: v
        Open selected buffer in a horizontal (below) split: s
        Close selected buffer split opened: x

    ## WORKSPACES:
        Show all workspaces: <CTRL+Space> "w"
        Save/Update current open buffers on workspace: <CTRL+Space> "w", "s"
        Delete workpace: [Show all workpaces], navigate, then "d"
        Rename current workspace: [Show all workpaces], navigate, then "="
        Create a new workpace: <CTRL+Space> "w", "n"


# NERDTree:
## (https://github.com/scrooloose/nerdtree/blob/master/doc/NERD_tree.txt)
    Open: <CTRL+n>
    Refresh: put the cursor on the folder, then: <r> or <R>
    Bookmark a file/folder: put the cursor on the file/folder, then:
        (VISUAL) :Bookmark [<name>]
    By default, bookmarks are at: $HOME/.NERDTreeBookmarks
    To create / delete / copy / move files or folders: put the cursor on the desired file/directory to operate on, then: <m>

# Python:
#
    Expand code snippet: <CTRL+b> (snippets can be found and managed at .vim/snippets/python.snippets)
    PEP8 and other python style checking: (VISUAL) <F8>
    [*] "," here is the <Leader> key, defined on .vimrc

    # Jedi (python autocompletion and go to definition):
        Go to definition: (VISUAL) <CTRL+c>,g
        Show documentation: (VISUAL) <CTRL+c>,d
        Auto-completion: (INSERT MODE) <CTRL+Space>

    ## TagBar:
        Open: <F7>
        Order (same as file or alphabetical): <s>
        Navigate between methods / classes: <up> or <down>
        Show method / class contents: <p>
        Go to method / class: <ENTER>
        Show the signature of a method: <SPACE>
        DEBUG: (VISUAL) :TagbarDebug (This should leave a file called tagbardebug.log in the current directory)
            NOTE: If your tagbar is empty:
                    1)
                    - Put the cursor on your python code buffer (make sure it is not on MiniBufExplorer or Quickfix Window)
                    - Press <F7> (activates the Tagbar buffer)
                    - Go to the Tagbar buffer
                    - Hit the <F1> key.
                    2) Just hist the <F7> key many times, until the Tagbar appears.

# Fugitive (git plugin):
    Git status: (VISUAL) :Gstatus
    Git blame: (VISUAL) :Gblame
    Git diff: (VISUAL) :Gdiff
    Search on all the project [*]: (VISUAL) :Ggrep 'REGEX'
    Git log [*]: (VISUAL) :Glog
    [*] Both work better if the quickfix window is open


