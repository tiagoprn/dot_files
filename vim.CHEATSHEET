# General
    ## QUICKFIX WINDOW
    ### It is useful, for example, for the Fugitive git plugin "Ggrep"
        Open: (VISUAL) :copen
        Close: (VISUAL) :cclose 
        Go to next occurence/error [*]:  (VISUAL) :cn
        Go to previous occurence/error [*]: (VISUAL) :cp
            [*] On both of them, if you specify a number after the command, it will Go to next/previous X occurences you passed to it.
        Clean: (VISUAL) :call setqflist([])

    ## MARKS
    ### They are useful to mark points of a file:
        Mark a line as "a" [*]: (VISUAL) :ma a
        Go to marked line "a": (VISUAL) :'a
        List all marks: (VISUAL) :marks
        [*] It is better to use only lowercase letters

    ## NAVIGATION (VISUAL MODE)
        Go to next word: <w>
        Go to previous word: <b> 

    ## SEARCH / REPLACE
        - Search for current word on the cursor (visual mode): 
            Forwards: (VISUAL) * 
            Backwards: (VISUAL) #
        - Search / Replace
            (VISUAL) :%s/search/replace/g[ic]
                %s = on the whole file
                g = all ocurrences in the line
                i = case insensitive
                c = confirm each match
                

    ## HISTORY:
        List of past commands (hitting <Enter> you can execute them):
            (VISUAL) q:
            To exit the list without executing any command: <CTRL+C>

    ## COPY
        To copy text from other apps (browser, text editor, disabling the auto-indent:
            (INSERT) mode, press <F2>. Then paste the desired text and press <F2> again.


# vim-ctrlspace:

    ## BUFFERS: 
        Show buffers list: <CTRL+Space> (navigate with <j>,<k>)
        Close buffer: (VISUAL) :bdelete
        Toggle buffers: (VISUAL) ,<w> ("," is the Leader key)
        Open selected buffer in a vertical (side-by-side) split: v
        Open selected buffer in a horizontal (below) split: s
        Close selected buffer split opened: x

    ## WORKSPACES:
        Show all workspaces: <CTRL+Space> "w"
        Save/Update current open buffers on workspace: <CTRL+Space> "w", "s"
        Delete workpace: [Show all workpaces], navigate, then "d"
        Rename current workspace: [Show all workpaces], navigate, then "="
        Create a new workpace: <CTRL+Space> "w", "n"


# NERDTree:
    Open: <CTRL+n> 
    Refresh: put the cursor on the folder, then: <r> or <R>


# Python:
    Expand code snippet: <CTRL+b> (snippets can be found and managed at .vim/snippets/python.snippets) 
    Show a module documentation [*]: (VISUAL) ,pw 
    PEP8 and other python style checking: (VISUAL) <F8>
    [*] "," here is the <Leader> key, defined on .vimrc
    ## TagBar:
        Open: <F7>
        Order (same as file or alphabetical): <s>
        Navigate between methods / classes: <up> or <down>
        Show method / class contents: <p>
        Go to method / class: <ENTER>
        Show the signature of a method: <SPACE>
        DEBUG: (VISUAL) :TagbarDebug (This should leave a file called tagbardebug.log in the current directory)
            NOTE: If your tagbar is empty:
                - Put the cursor on your python code buffer (make sure it is not on MiniBufExplorer or Quickfix Window)
                - Press <F7> (activates the Tagbar buffer)
                - Go to the Tagbar buffer 
                - Hit the <F1> key. 

# Fugitive (git plugin):
    Git status: (VISUAL) :Gstatus
    Git blame: (VISUAL) :Gblame
    Git diff: (VISUAL) :Gdiff
    Search on all the project [*]: (VISUAL) :Ggrep 'REGEX'
    Git log [*]: (VISUAL) :Glog 
    [*] Both work better if the quickfix window is open


# rope / rope.vim:

    https://github.com/python-rope/ropevim


    - by default rope auto assist is mapped to Control+Space

    - Auto import:
        <VISUAL MODE> :RopevimAutoImport

    - find occurrences:
        - <C-c> f

    - go to definition:
        - <C-c> g

    Key     Command
    C-x p o     RopeOpenProject
    C-x p k     RopeCloseProject
    C-x p f     RopeFindFile
    C-x p 4 f   RopeFindFileOtherWindow
    C-x p u     RopeUndo
    C-x p r     RopeRedo
    C-x p c     RopeProjectConfig
    C-x p n [mpfd]  RopeCreate(Module|Package|File|Directory)
        RopeWriteProject

    C-c r r     RopeRename
    C-c r l     RopeExtractVariable
    C-c r m     RopeExtractMethod
    C-c r i     RopeInline
    C-c r v     RopeMove
    C-c r x     RopeRestructure
    C-c r u     RopeUseFunction
    C-c r f     RopeIntroduceFactory
    C-c r s     RopeChangeSignature
    C-c r 1 r   RopeRenameCurrentModule
    C-c r 1 v   RopeMoveCurrentModule
    C-c r 1 p   RopeModuleToPackage
    C-c r o     RopeOrganizeImports
    C-c r n [vfcmp]     RopeGenerate(Variable|Function|Class|Module|Package)
    C-c r a /   RopeCodeAssist
    C-c r a g   RopeGotoDefinition
    C-c r a d   RopeShowDoc
    C-c r a f   RopeFindOccurrences
    C-c r a ?   RopeLuckyAssist
    C-c r a j   RopeJumpToGlobal
    C-c r a c   RopeShowCalltip

