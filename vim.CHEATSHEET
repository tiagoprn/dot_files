# General

    ## 1) Repetitions

    .: repeat the last command
    5p: paste text 5 times
    3yy: copy current line and the 2 ones below it
    2f [char]: go to the second occurence of char in line
    10k: moves 10 lines up
    5j: move 5 lines down

    ## 2) Movement Keys:

    h: left
    j: down
    k: up
    l: right

    zz: Center the viewport (window) on the cursor, without moving the cursor.
    <ctrl+Down>: move viewport down faster , without moving the cursor.
    <ctrl+Up>: move viewport up faster, without moving the cursor.

    f [char]: go to specific char in line
    w: next word
    b: beginning of current word / previous word
    e: end of current word / end of next word
    ^: first non-blank character of a line

    <Control>, h: move current line/selection to the left
    <Control>, j: move current line/selection down
    <Control>, k: move current line/selection up
    <Control>, l: move current line/selection to the right

    <Control>, Left or Right: Cycle through open buffers


    ## 3) Leave insert mode:

    Esc: Go to visual mode
    Ctrl+o: Go to normal mode to execute just one command and go back to insert mode

    ## 4) Insert a character x times:
    (in visual mode - do not start with ":")

    80i*<Esc> (this will insert the * character 80 times on the current cursor position)
    3i`<Esc> (this will insert the backstick character 3 times on the current cursor position)

    ## 5) Enter insert mode from normal mode:

    o: insert blank line below cursor
    O: insert blank line above cursor
    A: go to end of line and enter insert mode
    I: go to beginning of line and enter insert mode

    ## 6) Multiple cursor alternative to edit (vim does not have multiple cursors but has a more powerful syntax)

    ### A) Change multiple occurrences from word:

    /word<Enter>
    cgn[new_word]<Esc>
    <n><.> (to change the next occurence and repeat the change), or just <n> to skip currrent and go to next one

    ### B) Delete multiple occurrences from word:

    /word<Enter>
    de<Esc>
    <n><.> (to change the next occurence and repeat the change), or just <n> to skip currrent and go to next one

    ### C) Change block contents

    <Esc><Ctrl><v><select-block>
    c[type_text_here]<Esc>

    ### D) Delete block contents

    <Esc><Ctrl><v><select-block>
    d<Esc>

    If you need any more advanced editing than that, check [vim macros](https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db)

    ### E) Replace on current selected text (Visual selection):
    - Select the desired lines
    - `:s/old/new/g`

    ## 7) Advanced vim editing using text objects

    [c]hange [i]nner [TEXT_OBJECT]
    [c]hange [a]round [TEXT_OBJECT] (around = including the object)
    [d]elete [i]nner [TEXT_OBJECT]
    [d]elete [a]round [TEXT_OBJECT] (around = including the object)

    * TEXT_OBJECTS available:
        [w]ord
        [p]aragraph
        [s]entence
        [t]ag (e.g. <html>contents</html>)
        "
        '
        (
        [
        {
        <

    ## 8) Change case:

    Do a visual selection, then:

        ~: invert case
        U: change to uppercase
        u: change to lowercase

    ## 9) Run external shell command on selection (also useful to write a command stdout to current cursor position):
        <VISUAL>!sort  # This will run shell command sort on all selected lines
        <VISUAL>!ls -la  # this will run ls command and copy its stdout

    ## KEY MAPPINGS

    ### TO UNDERSTAND CUSTOMIZING MAPPINGS:
        https://stackoverflow.com/questions/3776117/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping

    ### View all key mappings in vim
        (VISUAL) :map

    ## DELETE ON LINE UNTIL WORD:
        (NORMAL) d/word

    ## QUICKLY MOVE ON A LINE:
    f: put the cursor on the character
    t: put the cursor before the character

    ## FZF COMMANDS:
        (VISUAL) :S - Insert snippet
        (VISUAL) C-f - Select file by name
        (VISUAL) C-g - Select file by contents

    ## BUFFERS:
        Close all current buffers: (VISUAL) :bufdo bdelete
          (bufdo do whatever is typed after it on all current buffers, so it can be useful on other contexts as well.)

    ## SPLITS:
        Split equally: <CTRL+w> =
        Resize current split rows number: <CTRL+w> [+ / -]
        Resize current split columns number: <CTRL+w> [> , <]
        (for both resizes, I can use vim number of repetitions patterns e.g. 5+, 5-, 5>, 5< etc...)

    ## Change selected block line length to default (divides into lines of equal length):
        :gq

    ## Do just one visual/normal command in insert mode and come back to insert mode automatically:
        <CTRL+o>


    ## Vim modes

    Normal: navigation mode
    Insert: editing mode
    Visual: for selecting text

    ## Navigation on screen:

    H(igh): Top of screen
    M(edium): Mid of screen
    L(ow): Bottom of screen

    ## Alternate shortcut to VISUAL mode:
        Instead of <Esc>: <Ctrl>[

    ## UNDO / REDO:
        Undo: (VISUAL) u
        Redo: (VISUAL) <CTRL+r>

    ## REPEAT THE LAST COMMAND
        (VISUAL) .

    ## SHOW / HIDE SPECIAL CHARS:
        :set list (to show all)
        :set nolist (to hide all)

    ## ZOOM / UNZOOM THE CURRENT BUFFER:
    (VISUAL) <CTRL+z>

    ## RELOAD CURRENT FILE (E.g., it was changes outside vim):
    (VISUAL) e!

    ## VERTICAL SELECTION (BLOCK):
	<CTRL+v>

    ## SELECT A WHOLE LINE:
    (VISUAL) V
    OBS.: keep selecting with the arrow keys you can select multiple lines as a whole

    ## SELECT WHAT IS IN QUOTES ON THE CURRENT LINE
    (works with "[}(" also)

        (VISUAL) norm 0yi"  # go to beginning of line (0), (y)ank what is (i)n double quotes

    ## SELECT ALL TEXT:

    (VISUAL) <,all>

    ## BATCH DELETE OF LINES:
        From an interval of lines: (VISUAL) :5,50d
	    From the current line on, delete the next 100k lines: (VISUAL) :.,+100000d

    ## BATCH COPY OF LINES:
        From an interval of lines: (VISUAL) :5,50y
	    From the current line on, copy the next 100k lines: (VISUAL) :.,+100000y

    ## REPLACE SELECTED TEXT WITH CLIPBOARD CONTENTS:
        (VISUAL) r

    ## REPLACE SELECTED TEXT WITH NEW CONTENTS:
        (VISUAL) Select the text, then c.

    ## DELETE UNTIL END OF LINE:
	    (VISUAL) d$

    ## DELETE UNTIL BEGINNING OF LINE:
        (VISUAL) d0

    ## NAVIGATION (VISUAL MODE)
        Go to next word: <w>
        Go to the end of a word: <e>
        Go to previous word: <b>
        Jump to a matching opening or closing parenthesis, square bracket or a curly brace: <%>

        ### MOVE TO THE START OF THE LINE:
            (VISUAL) 0

        ### MOVE TO THE END OF THE LINE:
            (VISUAL) $

        ### MOVE TO THE START OF THE LINE AND ENTER INSERT MODE:
            (VISUAL) I

        ### MOVE TO THE END OF THE LINE AND ENTER INSERT MODE:
            (VISUAL) A

        ### JOIN 2 lines:
            (VISUAL) J

        ### MOVE TO THE BEGINNING OF THE FILE:
            (VISUAL) gg

        ### MOVE TO THE END OF THE FILE:
            (VISUAL) G

        ### MOVE TO THE END OF THE FILE AND ENTER INSERT MODE:
            (VISUAL) GA

    ## SEARCH / REPLACE
        - Search for current word on the cursor (visual mode):
            Forwards: (VISUAL) *
            Backwards: (VISUAL) #
        - Search / Replace
            (VISUAL) :%s/search/replace/g[ic]
                %s = on the whole file
                g = all ocurrences in the line
                i = case insensitive
                c = confirm each match

    ## CHOOSE A SNIPPET FROM SNIPPETS LIST:

        (VISUAL) :S

    ## AFTER SEARCHING, REMOVE THE HIGHLIGHTED SELECTIONS:

        (NORMAL> <enter>

    ## HISTORY:
        List of past commands (hitting <Enter> you can execute them):
            (VISUAL) q:

    ## COPY
        To copy text from other apps (browser, text editor), disabling the auto-indent:
            (INSERT) mode, press <F2>. Then paste the desired text and press <F2> again.

    ## CLIPBOARD:
        Copy vim clipboard to system:
            (VISUAL) Select text (with <v>), then <C-y>

            (VISUAL) yy (copy contents of the current line)

        Paste system clipboard to vim:
            (VISUAL) <C-p>

    ## READ THE OUTPUT FROM A COMMAND ON THE CURRENT BUFFER:
        (VISUAL) read ![command]

    ## RUN A NORMAL MODE COMMAND ON MULTIPLE LINES:
        (VISUAL) norm Iline  # goes to the beginning of a line and enter INSERT mode, type line
        (VISUAL) norm Aend   # goes to the end of a line and enter INSERT mode, type end
        NOTES:
            - This can be done with many lines selected (with V), then :norm A... to edit multiple lines.
            - You can run any normal mode command you wish, but if you use I and A you will enter INSERT mode.

    ## SORT LINES ALPHABETICALLY

    Select the lines, then `:sort`.

    ## Record a macro:

    ```
    q<letter><commands>q
    ```

    - To execute the macro <number> times (once by default), type:

        ```
        <number-of-times>@<letter>
        ```

    - So, the complete process looks like:

    ```
    qa      - start recording to register a
    ...	    - your complex series of commands
    q	    - stop recording
    @a	    - execute your macro
    @@	    - execute your macro again
    99@a    - execute your macro 99 times
    ```

    ## Script vim commands
    $ vim --cmd 'echo "This runs before .vimrc"' -c ':call UltiSnips#ListSnippets()' -c '<Esc>' -c ':q!'
    $ vim -c ':call UltiSnips#ListSnippets()' -c ':q!'
    $ vim +PluginInstall +qall

# vim-bookmarks:
    (all commands below run in VISUAL mode):
    Set  Bookmark: <,,>
    Unset  Bookmark: <,c>
    Show all Bookmarks: <,a>
    Next Bookmark: <,n>
    Previous Bookmark: <,p>
    Clear All Bookmarks: <,x>

# TaskList:
    Toggle TODO/FIXME list: <CTRL+t>

# vim-fzf:
    Search file by name: <CTRL+f>
    Search file by contents: <CTRL+g>

# NERDTree:
## (https://github.com/scrooloose/nerdtree/blob/master/doc/NERD_tree.txt)
    Open: <CTRL+n>
    Refresh: put the cursor on the folder, then: <r> or <R>
    Bookmark a file/folder: put the cursor on the file/folder, then:
        (VISUAL) :Bookmark [<name>]
    By default, bookmarks are at: $HOME/.NERDTreeBookmarks
    To create / delete / copy / move files or folders: put the cursor on the desired file/directory to operate on, then: <m>

# All vim script events:
(reference: http://tech.saigonist.com/b/code/list-all-vim-script-events.html)

## Reading

Event 	Description
BufNewFile 	starting to edit a file that doesn't exist
BufReadPre 	starting to edit a new buffer, before reading the file
BufRead 	starting to edit a new buffer, after reading the file
BufReadPost 	starting to edit a new buffer, after reading the file
BufReadCmd 	before starting to edit a new buffer Cmd-event

FileReadPre 	before reading a file with a ":read" command
FileReadPost 	after reading a file with a ":read" command
FileReadCmd 	before reading a file with a ":read" command Cmd-event

FilterReadPre 	before reading a file from a filter command
FilterReadPost 	after reading a file from a filter command

StdinReadPre 	before reading from stdin into the buffer
StdinReadPost 	After reading from the stdin into the buffer

## Writing

Event 	Description
BufWrite 	starting to write the whole buffer to a file
BufWritePre 	starting to write the whole buffer to a file
BufWritePost 	after writing the whole buffer to a file
BufWriteCmd 	before writing the whole buffer to a file Cmd-event

FileWritePre 	starting to write part of a buffer to a file
FileWritePost 	after writing part of a buffer to a file
FileWriteCmd 	before writing part of a buffer to a file Cmd-event

FileAppendPre 	starting to append to a file
FileAppendPost 	after appending to a file
FileAppendCmd 	before appending to a file Cmd-event

FilterWritePre 	starting to write a file for a filter command or diff
FilterWritePost 	after writing a file for a filter command or diff

## Buffers

Event 	Description
BufAdd 	just after adding a buffer to the buffer list
BufCreate 	just after adding a buffer to the buffer list
BufDelete 	before deleting a buffer from the buffer list
BufWipeout 	before completely deleting a buffer

BufFilePre 	before changing the name of the current buffer
BufFilePost 	after changing the name of the current buffer

BufEnter 	after entering a buffer
BufLeave 	before leaving to another buffer
BufWinEnter 	after a buffer is displayed in a window
BufWinLeave 	before a buffer is removed from a window

BufUnload 	before unloading a buffer
BufHidden 	just after a buffer has become hidden
BufNew 	just after creating a new buffer

SwapExists 	detected an existing swap file

## Options

Event 	Description
FileType 	when the 'filetype' option has been set
Syntax 	when the 'syntax' option has been set
EncodingChanged 	after the 'encoding' option has been changed
TermChanged 	after the value of 'term' has changed

## Startup and exit

Event 	Description
VimEnter 	after doing all the startup stuff
GUIEnter 	after starting the GUI successfully
GUIFailed 	after starting the GUI failed
TermResponse 	after the terminal response to t_RV is received

QuitPre 	when using :quit, before deciding whether to quit
VimLeavePre 	before exiting Vim, before writing the viminfo file
VimLeave 	before exiting Vim, after writing the viminfo file

## Various

Event 	Description
FileChangedShell 	Vim notices that a file changed since editing started
FileChangedShellPost 	After handling a file changed since editing started
FileChangedRO 	before making the first change to a read-only file

ShellCmdPost 	after executing a shell command
ShellFilterPost 	after filtering with a shell command

FuncUndefined 	a user function is used but it isn't defined
SpellFileMissing 	a spell file is used but it can't be found
SourcePre 	before sourcing a Vim script
SourceCmd 	before sourcing a Vim script Cmd-event

VimResized 	after the Vim window size changed
FocusGained 	Vim got input focus
FocusLost 	Vim lost input focus
CursorHold 	the user doesn't press a key for a while
CursorHoldI 	the user doesn't press a key for a while in Insert mode
CursorMoved 	the cursor was moved in Normal mode
CursorMovedI 	the cursor was moved in Insert mode

WinEnter 	after entering another window
WinLeave 	before leaving a window
TabEnter 	after entering another tab page
TabLeave 	before leaving a tab page
CmdwinEnter 	after entering the command-line window
CmdwinLeave 	before leaving the command-line window

InsertEnter 	starting Insert mode
InsertChange 	when typing while in Insert or Replace mode
InsertLeave 	when leaving Insert mode
InsertCharPre 	when a character was typed in Insert mode, before inserting it

TextChanged 	after a change was made to the text in Normal mode
TextChangedI 	after a change was made to the text in Insert mode

ColorScheme 	after loading a color scheme

RemoteReply 	a reply from a server Vim was received

QuickFixCmdPre 	before a quickfix command is run
QuickFixCmdPost 	after a quickfix command is run

SessionLoadPost 	after loading a session file

MenuPopup 	just before showing the popup menu
CompleteDone 	after Insert mode completion is done

User 	to be used in combination with ":doautocmd"

