snippet use
	use({"${1:string}"})

snippet function
	function ${1:fname}(${2:...})
		${0:-- body}
	end

snippet for-loop
	for ${1:i}=${2:1},${3:10} do
		${0:print(i)}
	end

snippet for-loop-pairs
	for ${1:k},${2:v} in pairs(${3:table_name}) do
		${0:-- body}
	end

snippet nvim-filetype
	local filetype = vim.bo.filetype

snippet for-loop-ipairs
	for ${1:i},${2:v} in ipairs(${3:table_name}) do
		${0:-- body}
	end

snippet if-clause
	if ${1:condition} then
		${2:-- body}
	end

snippet if-else-clause
	if ${1:condition} then
		${2:-- if condition}
	else
		${0:-- else}
	end

snippet if-elif-clause
	elseif ${1:condition} then
		${0:--body}

snippet repeat-clause
	repeat
		${1:--body}
	until ${0:condition}

snippet while-clause
	while ${1:condition} do
		${0:--body}
	end

snippet notify
	vim.notify("${1:string}")

snippet open-file-for-reading
	local file = io.open(${1:file_path}, "r")
	local lines = file:read("*all")
	file:close()

snippet open-file-for-writing
	local file = io.open(${1:file_path}, "a")
	io.output(file)
	io.write(${1:line})
	io.close(file)

snippet current-date
	local current_date = os.date("%Y-%m-%d-%H%M%S")

snippet random-number
	local random_number = math.random(100, 999)

snippet debug_lua_object_or_table
	print(vim.inspect(${1:object_or_table}))

snippet regex
	-- this can also be used when I need e.g. to split a string by some character.
	local regex = "class%s%w+%(*.-%)*:"
	local text = "class Casa: \n this is a houre"
	for match in string.gmatch(text, regex) do
			-- If a match is found, print the match
			print(match)
	end

