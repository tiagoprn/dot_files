{
    "#!/usr/bin/env python": {
        "prefix": "env",
        "body": [
            "#!/usr/bin/env python",
            "$0"
        ],
        "description" : "Adds shebang line for default python interpreter."
    },
    "#!/usr/bin/env python3": {
        "prefix": "env3",
        "body": [
            "#!/usr/bin/env python3"
            "$0"
        ],
        "description" : "Adds shebang line for default python 3 interpreter."
    },
    "# -*- coding=utf-8 -*-": {
        "prefix": "enc",
        "body": [
            "# -*- coding=utf-8 -*-",
            "$0"
        ],
        "description" : "set default python2.x encoding specification to utf-8 as it is mentioned in pep-0263."
    },
    "# coding=utf-8": {
        "prefix": "enco",
        "body": [
            "# coding=utf-8",
            "$0"
        ],
        "description" : "Set default python3 encoding specification to utf-8, by default this is the encoding for python3.x as it is mentioned in pep-3120."
    },
    "method": {
        "prefix": "defs",
        "body": [
            "def ${1:mname}(self, ${2:arg}):",
            "\t${3:pass}$0"
        ],
        "description" : "Code snippet for a class method definition."
    },
    "function": {
        "prefix": "def",
        "body": [
            "def ${1:fname}(${2:arg}):",
            "\t${3:pass}$0"
        ],
        "description" : "Code snippet for function definition."
    },
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body": [
            "if __name__ == \"__main__\":",
            "\t${1:main()}$0"
        ],
        "description" : "Create implicitly all the code at the top level using the __name__ special variable."
    },
    "lambda": {
        "prefix": "lambda",
        "body": [
            "lambda ${1:parameter_list}: ${2:expression}"
        ],
        "description": "Code snippet for a lambda statement"
    },
    "async/def": {
        "prefix": "async/def",
        "body": [
            "async def ${1:funcname}(${2:parameter_list}):",
            "\t${3:pass}"
        ],
        "description": "Code snippet for an async statement"
    },
    "async/for": {
        "prefix": "async/for",
        "body": [
            "async for ${1:target} in ${2:iter}:",
            "\t${3:block}"
        ],
        "description": "Code snippet for an async for statement"
    },
    "async/for/else": {
        "prefix": "async/for/else",
        "body": [
            "async for ${1:target} in ${2:iter}:",
            "\t${3:block}",
            "else:",
            "\t${4:block}"
        ],
        "description": "Code snippet for an async for statement with else"
    },
    "async/with": {
        "prefix": "async/with",
        "body": [
            "async with ${1:expr} as ${2:var}:",
            "\t${3:block}"
        ],
        "description": "Code snippet for an async with statement"
    },
    "PDB set trace": {
        "prefix": "pdb",
        "body": [
            "__import__('pdb').set_trace()$0"
        ]
    },
    "iPDB set trace": {
        "prefix": "ipdb",
        "body": [
            "__import__('ipdb').set_trace()$0"
        ]
    },
    "rPDB set trace": {
        "prefix": "rpdb",
        "body": [
            "import rpdb2; rpdb2.start_embedded_debugger('${1:debug_password}')$0"
        ]
    },
    "PuDB set trace": {
        "prefix": "pudb",
        "body": [
            "__import__('pudb').set_trace()$0"
        ]
    },
    "IPython set trace": {
        "prefix": "ipydb",
        "body": [
            "__import__('IPython').embed()$0"
        ]
    },
    "Pretty print": {
        "prefix": "pprint",
        "body": [
            "__import__('pprint').pprint(${1:expression})$0"
        ]
    },
    "OrderedDict": {
        "prefix": "OrderedDict",
        "body": [
            "${1:dict_name} = OrderedDict[",
            "    ('${2:key}', '${3:value}'),",
            "]"
        ],
        "description": "OrderedDict"
    },
    "exception": {
        "prefix": "exception",
        "body": [
            "try:",
            "	${1:code}",
            "except:",
            "	logging.exception(${2:message})"
        ],
        "description": "exception"
    },
    "class": {
        "prefix": "class",
        "body": [
            "class ${1:ClassName}(${2:object}):",
            "    \"\"\"${3:docstring for $1}\"\"\"",
            "    def __init__(self, ${4:arg}):",
            "        ${5:super($1, self).__init__()}",
            "        self.$4 = $4",
            "        ${6}"
        ],
        "description": "class"
    },
    "path": {
        "prefix": "path",
        "body": [
            "from pathlib import Path",
            "current_path = str(Path().absolute())",
            "print(f'current_path:{current_path}')"
        ],
        "description": "path"
    },
    "rootpath": {
        "prefix": "rootpath",
        "body": [
            "from pathlib import Path",
            "root_path = str(Path().absolute().parent)",
            "print(f'root_path:{root_path}')"
        ],
        "description": "rootpath"
    },
    "datestr": {
        "prefix": "current date as string",
        "body": [
            "from datetime import datetime",
            "date_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')"
        ],
        "description": "current date as string variable"
    },
    "dateobj": {
        "prefix": "current date as instance variable",
        "body": [
            "from datetime import datetime",
            "date_obj = datetime.strptime('2011-12-31 11:59:59', '%Y-%m-%d %H:%M:%S')"
        ],
        "description": "current date as instance variable"
    },
    "log": {
        "prefix": "get logger",
        "body": [
            "logger = logging.getLogger(__name__)"
        ],
        "description": "get logger"
    },
    "pylint-disable": {
        "prefix": "pylint-disable",
        "body": [
            "# pylint: disable="
        ],
        "description": "pylint-disable"
    },
    "python-code-as-string": {
        "prefix": "python-code-as-string (ast)",
        "body": [
            "import ast",
            "print(ast.dump(ast.parse(\"${1:python_code_as_string}\")))"
        ],
        "description": "python-code-as-string"
    },
    "bash-command": {
        "prefix": "bash-command",
        "body": [
            "import subprocess",
            "",
            "def run(cmd: str):",
            "    proc = subprocess.Popen(",
            "	     cmd,",
            "	     stdout=subprocess.PIPE,",
            "	     stderr=subprocess.PIPE,",
            "	     shell=True,",
            "	     universal_newlines=True,",
            "    )",
            "    std_out, std_err = proc.communicate()",
            "    return proc.returncode, std_out, std_err"
        ],
        "description": "bash-command"
    },
    "icecream-debugger": {
        "prefix": "icecream-debugger",
        "body": [
            "from icecream import ic",
            "ic.configureOutput(prefix='icecream debug-> ')",
            "ic('world')"
        ],
        "description": "icecream-debugger"
    }
}
