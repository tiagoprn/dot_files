{
    "#!/usr/bin/env python": {
        "prefix": "env",
        "body": "#!/usr/bin/env python\n$0",
        "description" : "Adds shebang line for default python interpreter."
    },
    "#!/usr/bin/env python3": {
        "prefix": "env3",
        "body": "#!/usr/bin/env python3\n$0",
        "description" : "Adds shebang line for default python 3 interpreter."
    },
    "# -*- coding=utf-8 -*-": {
        "prefix": "enc",
        "body": "# -*- coding=utf-8 -*-\n$0",
        "description" : "set default python2.x encoding specification to utf-8 as it is mentioned in pep-0263."
    },
    "# coding=utf-8": {
        "prefix": "enco",
        "body": "# coding=utf-8\n$0",
        "description" : "Set default python3 encoding specification to utf-8, by default this is the encoding for python3.x as it is mentioned in pep-3120."
    },
    "method": {
        "prefix": "defs",
        "body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for a class method definition."
    },
    "function": {
        "prefix": "def",
        "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for function definition."
    },
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
        "description" : "Create implicitly all the code at the top level using the __name__ special variable."
    },
    "lambda": {
        "prefix": "lambda",
        "body": ["lambda ${1:parameter_list}: ${2:expression}"],
        "description": "Code snippet for a lambda statement"
    },
    "async/def": {
        "prefix": "async/def",
        "body": ["async def ${1:funcname}(${2:parameter_list}):", "\t${3:pass}"],
        "description": "Code snippet for an async statement"
    },
    "async/for": {
        "prefix": "async/for",
        "body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}"],
        "description": "Code snippet for an async for statement"
    },
    "async/for/else": {
        "prefix": "async/for/else",
        "body": [
            "async for ${1:target} in ${2:iter}:",
            "\t${3:block}",
            "else:",
            "\t${4:block}"
        ],
        "description": "Code snippet for an async for statement with else"
    },
    "async/with": {
        "prefix": "async/with",
        "body": ["async with ${1:expr} as ${2:var}:", "\t${3:block}"],
        "description": "Code snippet for an async with statement"
    },
    "PDB set trace": {
        "prefix": "pdb",
        "body": "__import__('pdb').set_trace()$0"
    },
    "iPDB set trace": {
        "prefix": "ipdb",
        "body": "__import__('ipdb').set_trace()$0"
    },
    "rPDB set trace": {
        "prefix": "rpdb",
        "body": "import rpdb2; rpdb2.start_embedded_debugger('${1:debug_password}')$0"
    },
    "PuDB set trace": {
        "prefix": "pudb",
        "body": "import pudb; pudb.set_trace()$0"
    },
    "IPython set trace": {
        "prefix": "ipydb",
        "body": "from IPython import embed; embed()$0"
    },
    "Pretty print": {
        "prefix": "pprint",
        "body": "__import__('pprint').pprint(${1:expression})$0"
    }
}
