{
    "read": {
        "prefix": "read",
        "body": "read -r ${0:VAR}",
        "description": "Read input of ${VAR}."
    },
    "expr": {
        "prefix": "expr",
        "body": "expr ${0:1 + 1}",
        "description": "Calculate numbers with Bash."
    },
    "bin-bash": {
        "prefix": "bin-bash",
        "body": [
            "#!/bin/bash"
        ],
        "description": "bin-bash"
    },
    "env-bash": {
        "prefix": "env-bash",
        "body": [
            "#!/usr/bin/env bash"
        ],
        "description": "env-bash"
    },
    "var-value-equals": {
        "prefix": "var-value-equals",
        "body": [
            "${1:VARIABLE_NAME}=${2:value}"
        ],
        "description": "var-value-equals"
    },
    "argument-from-script-with-default-value": {
        "prefix": "argument number from script. If not passed, set default value.",
        "body": [
            "VAR_NAME=\${1-\"default_value\"}"
        ],
        "description": "argument number from script. If not passed, set default value."
    },
    "if-var-value-empty": {
        "prefix": "if variable is empty",
        "body": [
            "MY_VAR=\"VALUE\"",
            "if [ -z \"$MY_VAR\" ]; then",
            "      echo \"$MY_VAR is NULL\"",
            "else",
            "      echo \"$MY_VAR is NOT NULL\"",
            "fi"
        ],
        "description": "if variable is empty"
    },
    "if-var-value-not-empty": {
        "prefix": "if variable is not empty",
        "body": [
            "MY_VAR=\"VALUE\"",
            "if [ -n \"$MY_VAR\" ]; then",
            "        echo \"$MY_VAR has value! o/\"",
            "else",
            "        echo \"$MY_VAR does not have value. :(\"",
            "fi"
        ],
        "description": "if variable is not empty"
    },
    "echo-date": {
        "prefix": "echo current date",
        "body": [
            "echo \"[$(date +%r)]----> ${1:MESSAGE}\""
        ],
        "description": "echo current date"
    },
    "multiline-comment": {
        "prefix": "multiline comment",
        "body": [
            ": '",
            "${1:TEXT}",
            "'"
        ],
        "description": "multiline comment"
    },
    "if-file-exists": {
        "prefix": "if file exists",
        "body": [
            "if [ -f \"${1:FILE}\" ]; then",
            "	echo \"File exists \o/\"",
            "else",
            "	echo \"File DOES NOT exist :(\"",
            "fi"
        ],
        "description": "if file exists"
    },
    "if-directory-exists": {
        "prefix": "if directory exists",
        "body": [
            "if [ -d \"${1:DIRECTORY}\" ]; then",
            "    echo \"Directory exists \o/\"",
            "else",
            "    echo \"Directory DOES NOT exist :(\"",
            "fi"
        ],
        "description": "if directory exists"
    },
    "if-equals": {
        "prefix": "if equals",
        "body": [
            "if [ \"$IS_PAUSED\" == 'true' ]; then",
            "    echo 'IS TRUE \o/'",
            "else",
            "    echo 'IS FALSE :('",
            "fi"
        ],
        "description": "if equals"
    },
    "colors": {
        "prefix": "print colored output",
        "body": [
            "if [ -x \"$(command -v tput)\" ]; then",
            "    bold=\"$(tput bold)\"",
            "    black=\"$(tput setaf 0)\"",
            "    red=\"$(tput setaf 1)\"",
            "    green=\"$(tput setaf 2)\"",
            "    yellow=\"$(tput setaf 3)\"",
            "    blue=\"$(tput setaf 4)\"",
            "    magenta=\"$(tput setaf 5)\"",
            "    cyan=\"$(tput setaf 6)\"",
            "    white=\"$(tput setaf 7)\"",
            "    reset=\"$(tput sgr0)\"",
            "fi",
            "",
            "ON=\"${reset}${bold}${blue}\"",
            "OFF=\"${reset}${bold}${red}\"",
            "RESET=\"${reset}\"",
            "",
            "echo \"${ON} true ${RESET}\"",
            "echo \"${OFF} false ${RESET}\"",
            "
        ],
        "description": "print colored output"
    },
    "case": {
        "prefix": "case statement",
        "body": [
            "case ${1:word} in",
            "	${2:pattern} )",
            "		$0;;",
            "esac"
        ],
        "description": "case statement"
    },
    "elif": {
        "prefix": "elif statement",
        "body": [
            "elif ${2:[[ ${1:condition} ]]}; then",
            "    ${VISUAL}${0:#statements}"
        ],
        "description": "elif statement"
    },
    "script-args": {
        "prefix": "script args",
        "body": [
            "usage()",
            "{",
            "	echo \"usage: script.sh -p value\"",
            "}",
            "",
            "no_args=\"true\"",
            "while getopts \":p:\" arg; do",
            "  case $arg in",
            "    p) VALUE=$OPTARG;;",
            "  esac",
            "  no_args=\"false\"",
            "done",
            "",
            "[[ \"$no_args\" == \"true\" ]] && { usage; exit 1; }",
            "",
            "echo -e \"VALUE=$VALUE\""
        ],
        "description": "script args"
    },
    "script path and name": {
        "prefix": "script path and name",
        "body": [
            "script_name=$(basename \"$0\")",
            "script_path=$(dirname \"$(readlink -f \"$0\")\")",
            "script_path_with_name=\"$script_path/$script_name\"",
            "echo \"Script path: $script_path\"",
            "echo \"Script name: $script_name\"",
            "echo \"Script path with name: $script_path_with_name\""
        ],
        "description": "script path and name"
    },
    "function with args": {
        "prefix": "function with args",
        "body": [
            "my_function()",
            "{",
            "	local first_param=$1",
            "	local second_param=$2",
            "	echo \"first param: $first_param, second param: $second_param\"",
            "}"
        ],
        "description": "function with args"
    },
    "for statement": {
        "prefix": "for statement",
        "body": [
            "for (( i = 0; i < ${1:10}; i++ )); do",
            "    ${VISUAL}${0:#statements}",
            "done"
        ],
        "description": "for statement"
    },
    "for..in statement (iterate on words)": {
        "prefix": "for..in statement (iterate on words)",
        "body": [
            "WORDS=\"banana maçã tomate\"",
            "for WORD in $WORDS; do",
            "    echo -e \"$WORD\"",
            "done"
        ],
        "description": "for..in statement (iterate on words)"
    },
    "iterate files on directory": {
        "prefix": "iterate files on directory",
        "body": [
            "FILES_PATH=\"/path/*.txt\"",
            "for FILE in $FILES_PATH; do",
            "	echo \"----------------------\"",
            "	echo \"Full file path: $FILE\"",
            "	filename=$(basename -- \"$FILE\")",
            "	echo \"File name: $filename\";",
            "done"
        ],
        "description": "iterate files on directory"
    },
    "here": {
        "prefix": "here",
        "body": [
            "<<-${2:'${1:TOKEN}'}"
            "	$0"
            "${1/['\"`](.+)['\"`]/$1/}"
        ],
        "description": "here"
    },
    "if statement": {
        "prefix": "if statement",
        "body": [
            "if ${2:[[ ${1:condition} ]]}; then",
            "	${VISUAL}${0:#statements}",
            "fi"
        ],
        "description": "if statement"
    },
    "until statement": {
        "prefix": "until statement",
        "body": [
            "until ${2:[[ ${1:condition} ]]}; do",
            "	${0:#statements}",
            "done"
        ],
        "description": "until statement"
    },
    "while statement": {
        "prefix": "while statement",
        "body": [
            "while ${2:[[ ${1:condition} ]]}; do",
            "	${0:#statements}",
            "done"
        ],
        "description": "while statement"
    },
    "function statement": {
        "prefix": "function statement",
        "body": [
            "function ${1:name}($2) {",
            "	$3",
            "}"
        ],
        "description": "function statement"
    },
    "current date": {
        "prefix": "current date",
        "body": [
            "TIMESTAMP=\"$(date \"+%Y%m%d.%H%M.%S\")\""
        ],
        "description": "current date"
    },
    "redirect stdout and stderr to file": {
        "prefix": "redirect stdout and stderr to file",
        "body": [
            ": '",
            "Bash executes the redirects from left to right as follows:",
            "    >>file.txt: Open file.txt in append mode and redirect stdout there.",
            "    2>&1: Redirect stderr to \"where stdout is currently going\". In this case, that is a file opened in append mode. In other words, the &1 reuses the file descriptor which stdout currently uses.",
            "'",
            "cmd >>file.txt 2>&1"
        ],
        "description": "redirect stdout and stderr to file"
    }
}
