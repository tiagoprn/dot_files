snippet OrderedDict
	${1:dict_name} = OrderedDict[
		('${2:key}', '${3:value}'),
	]

snippet exc
	try:
		${1:code}
	except:
		logging.exception(${2:message})

snippet class
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}

snippet pathlib_current_path
	from pathlib import Path
	current_path = str(Path().absolute())
	print(f'current_path:{current_path}')

snippet pathlib_rootpath
	from pathlib import Path
	root_path = str(Path().absolute().parent)
	print(f'root_path:{root_path}')

snippet fs
	f'${1:string}'

snippet datestr
	from datetime import datetime
	date_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')

snippet dateobj
	from datetime import datetime
	date_obj = datetime.strptime('2011-12-31 11:59:59', '%Y-%m-%d %H:%M:%S')

snippet log
	logger = logging.getLogger(__name__)

snippet ipy
	__import__('IPython').embed()

snippet pdb
	__import__('pdb').set_trace()

snippet pudb
	__import__('pudb').set_trace()

snippet ipdb
	__import__('ipdb').set_trace()

snippet celery-rdb
	from celery.contrib import rdb
	rdb.set_trace()

snippet pl
	 # pylint: disable=

snippet ast
	import ast
	print(ast.dump(ast.parse("${1:python_code_as_string}")))

snippet bash
	import subprocess

	def run(cmd: str):
	    proc = subprocess.Popen(
		cmd,
		stdout=subprocess.PIPE,
		stderr=subprocess.PIPE,
		shell=True,
		universal_newlines=True,
	    )
	    std_out, std_err = proc.communicate()
	    return proc.returncode, std_out, std_err

snippet ic
	from icecream import ic
	ic.configureOutput(prefix='icecream debug-> ')
	ic('world')

snippet pprint
	__import__('pprint').pprint(${1:expression}, width=1)$0

snippet ifmain
	if __name__ == '__main__':
	    ${1:main()}$0

snippet uuid
	import uuid, sys
	sys.stdout.write(str(uuid.uuid4()))

snippet timestamp_iso
	from datetime import datetime
	print(datetime.now().isoformat())

snippet random_number
	${1}import random
	import os

	def generate_random_number(start: int, finish: int, seed_bytes:int=128) -> str:
	    random.seed(os.urandom(seed_bytes))
	    return random.randint(start, finish)

snippet stdout_write
	sys.stdout.write('${1}')

snippet function_type_hint_example
	from typing import Callable
	GreetingReader = Callable[[], str]
	#                         |   |
	#                         |   |> return value
	#                         |
	#                         |> arguments

snippet immutable_sort_randomization
	import random
	test_list = [12, 34, 234, 452, -1]
	sorted_list = sorted(test_list)  # you will create a new list, not changing test_list values
	shuffled_list = random.sample(sorted_list, k=len(sorted_list))  # you will create a new list, not changing test_list values

snippet mutable_sort_randomization
	import random
	test_list = [12, 34, 234, 452, -1]
	test_list.sort()  # this will change test_list values
	print(test_list)
	random.shuffle(test_list)   # this will change test_list
	print(test_list)

snippet set-union
	${1:set1} | ${2:set2}

snippet set-intersection
	${1:set1} & ${2:set2}

snippet set-difference
	${1:set1} - ${2:set2}

snippet heap
	import heapq
	heap = [1, 2, 65, 78, 98, 3, 6, 7, 99]  # it is not ordered
	heapq.heapify(heap)  # this will mutate heap to be ordered
	heapq.nlargest(3, heap)  # 3 max numbers
	heapq.nsmallest(3, heap)  # 3 minor numbers
	heapq.heappush(heap, -9)  # add a number on the heap (keeping it on the right order)
	heapq.heappop(heap)  # remove the smallest number on the heap (keeping it on the right order)
	heapq.heappushpop(heap, 12)  # add a new number and return the smallest one (keeping it on the right order)
	heap[0]  # O(1) way to get the smallest number
	heapq.nlargest(1, heap)  # get the greatest number (it will NOT necessarily be the last one on the array)

snippet binary_search
	import bisect
	index_that_has_555_on_an_array = bisect.bisect(my_array, 555)
	bisect.insort(my_array, 666)  # insert element on the binary tree

snippet super
	super().__init__()

snippet pytest_parametrize
    @pytest.mark.parametrize('var1,var2',
        [
            ('tuple1-var1', 'tuple1-var2',),
            ('tuple2-var1', 'tuple2-var2',),
        ],
    )
    def test_name(var1, var2):
        # use var1 and var2 here

snippet function_info
	# fun below can be any function object.
	# e.g. fun = print
	info = f'module: {fun.__module__} , name: {fun.__qualname__}'
	print(info)

snippet md5_hash
	# Works only on strings
	# To use on dicts, just use cast them to a string - str(your_dict)
	import hashlib
	hashlib.md5("YOUR-STRING-GOES-HERE".encode('utf-8')).hexdigest()

snippet pytest_run_on_condition
	@pytest.mark.skipif(${1:bool_condition}, reason="${2:string_describing_condition}")

snippet stack_print
	__import__('traceback').print_stack()

snippet pathlib_get_files_in_directory
	from pathlib import Path

	def get_files(path='.', filetype = ".py"):
	    # globs notation:
	    # **/* : search on subdirectories
	    # *    : search on current directory
	    files = Path(path).glob('**/*' + filetype)
	    for file_name in files:
	        print(file_name)
