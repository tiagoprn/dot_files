snippet OrderedDict
	${1:dict_name} = OrderedDict[
		('${2:key}', '${3:value}'),
	]

snippet exc
	try:
		${1:code}
	except:
		logging.exception(${2:message})

snippet class
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}

snippet path
	from pathlib import Path
	current_path = str(Path().absolute())
	print(f'current_path:{current_path}')

snippet rootpath
	from pathlib import Path
	root_path = str(Path().absolute().parent)
	print(f'root_path:{root_path}')

snippet fs
	f'${1:string}'

snippet datestr
	from datetime import datetime
	date_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')

snippet dateobj
	from datetime import datetime
	date_obj = datetime.strptime('2011-12-31 11:59:59', '%Y-%m-%d %H:%M:%S')

snippet log
	logger = logging.getLogger(__name__)

snippet ipy
	__import__('IPython').embed()

snippet pudb
	__import__('pudb').set_trace()

snippet ipdb
	__import__('ipdb').set_trace()

snippet celery-rdb
	from celery.contrib import rdb
	rdb.set_trace()

snippet pl
	 # pylint: disable=

snippet ast
	import ast
	print(ast.dump(ast.parse("${1:python_code_as_string}")))

snippet bash
	import subprocess

	def run(cmd: str):
	    proc = subprocess.Popen(
		cmd,
		stdout=subprocess.PIPE,
		stderr=subprocess.PIPE,
		shell=True,
		universal_newlines=True,
	    )
	    std_out, std_err = proc.communicate()
	    return proc.returncode, std_out, std_err

snippet ic
	from icecream import ic
	ic.configureOutput(prefix='icecream debug-> ')
	ic('world')

snippet pprint
	__import__('pprint').pprint(${1:expression}, width=1)$0

snippet ifmain
	if __name__ == '__main__':
	    ${1:main()}$0

snippet uuid
	import uuid, sys
	sys.stdout.write(str(uuid.uuid4()))

snippet timestamp_iso
	from datetime import datetime
	print(datetime.now().isoformat())

snippet random_number
	${1}import random
	import os

	def generate_random_number(start: int, finish: int, seed_bytes:int=128) -> str:
	    random.seed(os.urandom(seed_bytes))
	    return random.randint(start, finish)

snippet stdout_write
	sys.stdout.write('${1}')

snippet function_type_hint_example
	from typing import Callable
	GreetingReader = Callable[[], str]
	#                         |   |
	#                         |   |> return value
	#                         |
	#                         |> arguments

snippet immutable_sort_randomization
	import random
	test_list = [12, 34, 234, 452, -1]
	sorted_list = sorted(test_list)  # you will create a new list, not changing test_list values
	shuffled_list = random.sample(sorted_list, k=len(sorted_list))  # you will create a new list, not changing test_list values

snippet mutable_sort_randomization
	import random
	test_list = [12, 34, 234, 452, -1]
	test_list.sort()  # this will change test_list values
	print(test_list)
	random.shuffle(test_list)   # this will change test_list
	print(test_list)

snippet set-union
	${1:set1} | ${2:set2}

snippet set-intersection
	${1:set1} & ${2:set2}

snippet set-difference
	${1:set1} - ${2:set2}
