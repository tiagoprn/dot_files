snippet OrderedDict
	${1:dict_name} = OrderedDict[
		('${2:key}', '${3:value}'),
	]

snippet exc
	try:
		${1:code}
	except:
		logging.exception(${2:message})

snippet class
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}

snippet path
	from pathlib import Path
	current_path = str(Path().absolute())
	print(f'current_path:{current_path}')

snippet rootpath
	from pathlib import Path
	root_path = str(Path().absolute().parent)
	print(f'root_path:{root_path}')

snippet fs
	f'${1:string}'

snippet datestr
	from datetime import datetime
	date_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')

snippet dateobj
	from datetime import datetime
	date_obj = datetime.strptime('2011-12-31 11:59:59', '%Y-%m-%d %H:%M:%S')

snippet log
	logger = logging.getLogger(__name__)

snippet ipy
	__import__('IPython').embed()
snippet pl
	 # pylint: disable=
snippet ast
	import ast
	print(ast.dump(ast.parse("${1:python_code_as_string}")))
snippet bash
	import subprocess

	def run(cmd: str):
	    proc = subprocess.Popen(
		cmd,
		stdout=subprocess.PIPE,
		stderr=subprocess.PIPE,
		shell=True,
		universal_newlines=True,
	    )
	    std_out, std_err = proc.communicate()
	    return proc.returncode, std_out, std_err
