# remap prefix to Control + a (instead of the default Control + b):
set -g prefix C-a
bind C-a send-prefix  #@  PREFIX TRIGGER
unbind C-b

# Sets the time tmux wait before recognizing its prefix
set-option -sg escape-time 0

CUSTOM_RED="#960018"
CUSTOM_WHITE="#ffffff"
CUSTOM_CYBERPUNK="#8f8ce3"
CUSTOM_BLUE="#0000ff"
CUSTOM_YELLOW="#f1c232"
CUSTOM_GRAY="#cccccc"
CUSTOM_BLACK="#000000"
CUSTOM_LCARS="#e68405"

CUSTOM_ACCENT=$CUSTOM_LCARS
CUSTOM_ACCENT_CONTRAST=$CUSTOM_BLACK

# messages colors
set -g message-style bg=$CUSTOM_ACCENT,fg=$CUSTOM_WHITE


# --- STATUS BAR - BEGIN

# Status bar position
set-option -g status-position bottom
# default = trasnparent background (instead of the default green):
set -g status-style "bg=default"
# Center the status line text
set -g status-justify centre

# left status configuration
set -g status-left-length 70
set -g status-left "[#(whoami)]"
set -ga status-left "#[fg=$CUSTOM_BLACK]"
set -ga status-left "#[bg=$CUSTOM_ACCENT]"
set -ga status-left " SESSION "
set -ga status-left "#[bold]#S"
set -ga status-left "#[$CUSTOM_BLACK]"
set -ga status-left "@#(hostname) "

# middle status configuration
## current open window
set -g window-status-current-format "#[bold]"
set -ga window-status-current-format "#[fg=$CUSTOM_BLACK]"
set -ga window-status-current-format "#[bg=$CUSTOM_ACCENT]"
set -ga window-status-current-format " #{window_index}:#{window_name}"
set -ga window-status-current-format "#{window_flags} "
## other open windows
set -g window-status-format " #{window_index}:#{window_name}"
set -ga window-status-format "#{window_flags} "

# right status configuration
set-window-option -g status-right-length 100
set -g status-right "#[fg=$CUSTOM_CYBERPUNK] #[bg=$CUSTOM_ACCENT_CONTRAST] %b %d %Y %l:%M %p"
set -g status-right "#[fg=$CUSTOM_YELLOW] #[bg=$CUSTOM_ACCENT_CONTRAST] #(sb-memory) #[fg=$CUSTOM_CYBERPUNK] #(sb-loadavg) #[fg=$CUSTOM_WHITE] #(sb-cpu) #[fg=$CUSTOM_ACCENT] #(sb-temperature)"

# --- STATUS BAR - END


# --- nvim specific settings - BEGIN
# (settings according to what is described on `:checkhealth`, session "tmux")

# WARNING `focus-events` is not enabled. |'autoread'| may not work.
set-option -g focus-events on

# - WARNING Neither Tc nor RGB capability set. True colors are disabled. |'termguicolors'| won't work properly.
#   - ADVICE:
#     - Put this in your ~/.tmux.conf and replace XXX by your $TERM outside of tmux:
#       set-option -sa terminal-features ',XXX:RGB'
set-option -sa terminal-features ',alacritty:RGB'

# --- nvim specific settings - END

# the line dividing the panes
set -g pane-active-border-style "bg=default fg=$CUSTOM_ACCENT"
set -g pane-border-lines heavy

# fix the titles
set -g set-titles on
set -g set-titles-string "TMUX SESSION #S, WINDOW #I:#W"

# messages duration - disabled due to error on starting a new session with it.
# set-option display-time 1000

# be notified when there is activity in one of your windows
set-window-option -g monitor-activity on

# don't rename windows automatically
set-option -g allow-rename off
set-window-option -g automatic-rename off

# increase scrollback buffer size
set -g history-limit 50000

# Below is because of:
# https://stackoverflow.com/questions/42377945/vim-adding-cursorshape-support-over-tmux-ssh
set-option -g default-terminal "screen-256color"
set-option -g xterm-keys on
set -ga terminal-overrides ",screen*:Ss=[%p1%d q:Se=[2 q"
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
# set-window-option -g utf8 on

set-option -g -q mouse on
setw -g mode-keys vi

unbind [
bind Escape copy-mode  #@ enter copy mode
unbind p
bind p paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection  #@ (vim copy mode) begin selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel  #@ (vim copy mode) copy selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle  #@ (vim copy mode) begin vertical selection
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"  #@ (vim copy mode) copy selection to clipboard
set-option -s set-clipboard off  #@ removes artifacts from screen when copying

bind-key M-w command-prompt -p 'save pane history to filename:' -I '~/tmux.history' 'capture-pane -S - ; save-buffer %1 ; delete-buffer'  #@ save pane history to file

# Below allows you to press page up in normal mode and
# have it scroll back into the history.
# If you page down back to the bottom of the history,
# it automatically exits copy mode. If there is an alternate screen
# (i.e. a full screen app like vim, less, mutt, etc) then it does not enter
#  copy mode, but passes through the key press. This is because alternate
# screen apps usually handle page up/down itself and also
# will have no scroll back.
bind-key -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"  #@ scroll back in history (<PageUp/Down>)
bind-key -T copy-mode-vi PPage send-keys -X page-up  #@ (vim copy mode) <PageUp>
bind-key -T copy-mode-vi NPage send-keys -X page-down  #(vim copy mode) <PageDown>

# Below is very similar to page up, except for the mouse wheel. i.e. I just
# scroll back and forward and if I scroll to the end of the history,
# copy mode automatically exits. Again, just pass through the click for
# alternate screens - they often handle the mouse themselves.
bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
bind-key -T copy-mode-vi WheelUpPane send-keys -X halfpage-up
bind-key -T copy-mode-vi WheelDownPane send-keys -X halfpage-down

bind-key y set-window-option synchronize-panes  #@ broadcast commands to all panes (like terminator does)

# rebinds the split keys, and split and create windows on the same directory where you opened them:
bind / split-window -h -c "#{pane_current_path}"  #@ new pane, horizontal split
bind \\ split-window -v -c "#{pane_current_path}"  #@ new pane, vertical split
bind c new-window -c "#{pane_current_path}"  #@ create new window

bind v select-layout even-vertical  #@ panes layout: even-vertical
bind V select-layout main-vertical  #@ panes layout: main-vertical
bind h select-layout even-horizontal  #@ panes layout: even-horizontal
bind H select-layout main-horizontal  #@ panes layout: main-horizontal
bind T select-layout tiled  #@ panes layout: tiled

bind ] run "tmux popup -E -w 75% -h 75% 'tmux-run-command-on-other-session-window-and-pane.sh'"  #@ popup window to run command on another session+window+pane
bind [ run "tmux switch-client -l"  #@ switch back to previous tmux session

bind s set-option -g status  #@ show/hide the status bar

bind -n M-0 select-window -t 0  #@ go to window 0
bind -n M-1 select-window -t 1  #@ go to window 1
bind -n M-2 select-window -t 2  #@ go to window 2
bind -n M-3 select-window -t 3  #@ go to window 3
bind -n M-4 select-window -t 4  #@ go to window 4
bind -n M-5 select-window -t 5  #@ go to window 5
bind -n M-6 select-window -t 6  #@ go to window 6
bind -n M-7 select-window -t 7  #@ go to window 7
bind -n M-8 select-window -t 8  #@ go to window 8
bind -n M-9 select-window -t 9  #@ go to window 9

# start a non-login shell
set -g default-command "${SHELL}"

# source .tmux.conf as suggested in `man tmux`
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"  #@ reload tmux with current .tmux.conf

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
bind-key -T copy-mode-vi 'M-\' select-pane -l

bind-key "Space" display-popup -E -w 80% "/storage/src/dot_files/tiling-window-managers/scripts/switch-tmux-session.sh"  #@ switch session menu (fzf)

bind-key g run-shell "$HOME/.local/share/nvim/site/pack/packer/start/harpoon/scripts/tmux/switch-back-to-nvim"  #@ go back to nvim (harpoon)

# --- PLUGINS ---

# List of plugins
set -g @tpm_plugins '            \
  tmux-plugins/tpm               \
'

## Plugins configuration

# --- MANUAL CHEATSHEET ---
#Prefix,t          #@ show current time
#Prefix,shift+i	   #@ install plugins
#Prefix,shift+u	   #@ update plugins
#Prefix,alt+u      #@ remove plugin

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'
